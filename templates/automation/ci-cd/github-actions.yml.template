# GitHub Actions CI/CD 配置模板
# 适用于: Node.js, Python, Java, Go 等主流技术栈
# 使用说明:
# 1. 将此文件重命名为 .github/workflows/ci.yml
# 2. 根据项目技术栈调整环境变量和命令
# 3. 修改触发条件和分支策略

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PROJECT_NAME: {{PROJECT_NAME}}
  NODE_VERSION: {{NODE_VERSION}}
  PYTHON_VERSION: {{PYTHON_VERSION}}
  JAVA_VERSION: {{JAVA_VERSION}}
  GO_VERSION: {{GO_VERSION}}

jobs:
  # 项目分析阶段
  analyze:
    runs-on: ubuntu-latest
    outputs:
      tech-stack: ${{ steps.detect.outputs.tech-stack }}
      test-command: ${{ steps.detect.outputs.test-command }}
      build-command: ${{ steps.detect.outputs.build-command }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Detect Technology Stack
        id: detect
        run: |
          if [ -f "package.json" ]; then
            echo "tech-stack=node" >> $GITHUB_OUTPUT
            echo "test-command=npm test" >> $GITHUB_OUTPUT
            echo "build-command=npm run build" >> $GITHUB_OUTPUT
          elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
            echo "tech-stack=python" >> $GITHUB_OUTPUT
            echo "test-command=pytest" >> $GITHUB_OUTPUT
            echo "build-command=python -m build" >> $GITHUB_OUTPUT
          elif [ -f "pom.xml" ]; then
            echo "tech-stack=java" >> $GITHUB_OUTPUT
            echo "test-command=mvn test" >> $GITHUB_OUTPUT
            echo "build-command=mvn package" >> $GITHUB_OUTPUT
          elif [ -f "go.mod" ]; then
            echo "tech-stack=go" >> $GITHUB_OUTPUT
            echo "test-command=go test ./..." >> $GITHUB_OUTPUT
            echo "build-command=go build" >> $GITHUB_OUTPUT
          fi

  # 代码质量检查
  quality:
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        if: needs.analyze.outputs.tech-stack == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Python
        if: needs.analyze.outputs.tech-stack == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Setup Java
        if: needs.analyze.outputs.tech-stack == 'java'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Setup Go
        if: needs.analyze.outputs.tech-stack == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Install dependencies
        run: |
          if [ "${{ needs.analyze.outputs.tech-stack }}" == "node" ]; then npm ci; fi
          if [ "${{ needs.analyze.outputs.tech-stack }}" == "python" ]; then pip install -r requirements.txt; fi
          if [ "${{ needs.analyze.outputs.tech-stack }}" == "java" ]; then mvn dependency:resolve; fi
          if [ "${{ needs.analyze.outputs.tech-stack }}" == "go" ]; then go mod download; fi
      
      - name: Run linting
        run: |
          if [ "${{ needs.analyze.outputs.tech-stack }}" == "node" ]; then npm run lint; fi
          if [ "${{ needs.analyze.outputs.tech-stack }}" == "python" ]; then flake8 .; fi
          if [ "${{ needs.analyze.outputs.tech-stack }}" == "java" ]; then mvn checkstyle:check; fi
          if [ "${{ needs.analyze.outputs.tech-stack }}" == "go" ]; then golangci-lint run; fi

  # 测试执行
  test:
    runs-on: ubuntu-latest
    needs: [analyze, quality]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup environment
        uses: actions/setup-node@v4
        if: needs.analyze.outputs.tech-stack == 'node'
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies and test
        run: |
          ${{ needs.analyze.outputs.test-command }}
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # 安全扫描
  security:
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security scan
        run: |
          if [ "${{ needs.analyze.outputs.tech-stack }}" == "node" ]; then npm audit --audit-level moderate; fi
          if [ "${{ needs.analyze.outputs.tech-stack }}" == "python" ]; then pip install safety && safety check; fi
          if [ "${{ needs.analyze.outputs.tech-stack }}" == "java" ]; then mvn org.owasp:dependency-check-maven:check; fi
          if [ "${{ needs.analyze.outputs.tech-stack }}" == "go" ]; then go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest && gosec ./...; fi

  # 构建和部署
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Build application
        run: ${{ needs.analyze.outputs.build-command }}
      
      - name: Deploy to staging
        run: |
          echo "Deploying to ${{ env.DEPLOY_ENV }} environment"
          # 添加实际部署命令